
import threading, signal
from ctypes import *
from dwfconstants import *
import math
import time
import sys
import numpy as np
from queue import Queue
import scipy.signal
from pyargus.directionEstimation import *

def killHandler(signum, frame):
    dwf.FDwfDeviceCloseAll()
    exit(1)

bandpass = [-0.000175060260186362,-0.000353338686493413,-0.000621204283271244,-0.000913294948399412,-0.00114553706240163,-0.00120585043547030,-0.000977057568001650,-0.000371717537171180,0.000630425056645751,0.00195217567104058,0.00340770041020750,0.00472006189457642,0.00556872300302904,0.00566140868424901,0.00481517926079561,0.00302477021597722,0.000496844675955493,-0.00236631196611616,-0.00503843537981396,-0.00698514209788913,-0.00779859536676991,-0.00731596647625131,-0.00568600352578931,-0.00335760730670032,-0.000983256230348018,0.000745701815656647,0.00129325256812850,0.000450204097798227,-0.00156966349843214,-0.00414565447286110,-0.00638690558128367,-0.00736415875965560,-0.00638008303702647,-0.00320378205489435,0.00180313486979077,0.00771794647257308,0.0132541217427717,0.0170856038351387,0.0182176742232532,0.0163015311773594,0.0117947631140197,0.00590383954490046,0.000301044313989426,-0.00332734225808346,-0.00378997438392906,-0.000816018932120499,0.00473501997062639,0.0109653088635825,0.0153432511127505,0.0153455273271198,0.00918818137461294,-0.00354165038240891,-0.0215344885234701,-0.0418122813677345,-0.0602173067837424,-0.0722563484384914,-0.0741227594616226,-0.0636601976293061,-0.0410292676684920,-0.00889585726089716,0.0279341978598373,0.0633799979401837,0.0912743620145990,0.106617994015326,0.106617994015326,0.0912743620145990,0.0633799979401837,0.0279341978598373,-0.00889585726089716,-0.0410292676684920,-0.0636601976293061,-0.0741227594616226,-0.0722563484384914,-0.0602173067837424,-0.0418122813677345,-0.0215344885234701,-0.00354165038240891,0.00918818137461294,0.0153455273271198,0.0153432511127505,0.0109653088635825,0.00473501997062639,-0.000816018932120499,-0.00378997438392906,-0.00332734225808346,0.000301044313989426,0.00590383954490046,0.0117947631140197,0.0163015311773594,0.0182176742232532,0.0170856038351387,0.0132541217427717,0.00771794647257308,0.00180313486979077,-0.00320378205489435,-0.00638008303702647,-0.00736415875965560,-0.00638690558128367,-0.00414565447286110,-0.00156966349843214,0.000450204097798227,0.00129325256812850,0.000745701815656647,-0.000983256230348018,-0.00335760730670032,-0.00568600352578931,-0.00731596647625131,-0.00779859536676991,-0.00698514209788913,-0.00503843537981396,-0.00236631196611616,0.000496844675955493,0.00302477021597722,0.00481517926079561,0.00566140868424901,0.00556872300302904,0.00472006189457642,0.00340770041020750,0.00195217567104058,0.000630425056645751,-0.000371717537171180,-0.000977057568001650,-0.00120585043547030,-0.00114553706240163,-0.000913294948399412,-0.000621204283271244,-0.000353338686493413,-0.000175060260186362]

#uncomment the bandpassF filter you need (only one uncommmented at a time)

#25k
bandpassF = [0.000658009934591473,-0.000488539355319401,-0.000337562117338735,-0.000231240191121112,-0.000156087197022928,-0.000102716420132544,-6.53545984188944e-05,-4.02613346046909e-05,-2.56707627115983e-05,-2.02853013389300e-05,-2.34530170625905e-05,-3.38092824467852e-05,-4.97313169939300e-05,-6.82769267028364e-05,-8.61115259571020e-05,-9.88632981411296e-05,-0.000102562475366602,-9.31789356243988e-05,-6.84461998177372e-05,-2.73005083255535e-05,2.83652109919630e-05,9.48864361581023e-05,0.000165295870363603,0.000231674504355012,0.000283734002403504,0.000312733913101735,0.000309062254263896,0.000268634005253894,0.000187529217476479,7.00863457669656e-05,-7.60755715613419e-05,-0.000239958043012920,-0.000402372521448911,-0.000545478136087534,-0.000649680743386486,-0.000696825153749857,-0.000672370888559980,-0.000569817479130022,-0.000390099902755409,-0.000143189146513630,0.000152484848965302,0.000469705234407472,0.000775676674159919,0.00103470546554071,0.00121285832912040,0.00128106260560108,0.00121947003422218,0.00102005342865911,0.000689575543830810,0.000249783437051348,-0.000262753951819118,-0.000800125979709631,-0.00130663123687204,-0.00172495031210285,-0.00200160331765247,-0.00209353372769688,-0.00197397205633317,-0.00163578602019037,-0.00109606567385098,-0.000393796874464712,0.000410255756888907,0.00123942181273581,0.00200845125484845,0.00263126700248408,0.00303037418297349,0.00314636951083864,0.00294531126464593,0.00242399122754277,0.00161297946580677,0.000575868040898509,-0.000595373285239269,-0.00178831607146331,-0.00288026977569385,-0.00375068936547749,-0.00429414791484309,-0.00443270687538902,-0.00412568999262549,-0.00337639233641081,-0.00223435821447166,-0.000793410473100364,0.000816005998634246,0.00243782915444428,0.00390602081757438,0.00506042629507181,0.00576488252983493,0.00592172647701261,0.00548490934080740,0.00446736801770957,0.00294246290331701,0.00104010148878851,-0.00106452237902102,-0.00316658768389453,-0.00505125861322986,-0.00651565824640124,-0.00739057360584367,-0.00755926650195843,-0.00697213035905643,-0.00565494157169250,-0.00370940543532424,-0.00130582024369055,0.00133129606730326,0.00394407149588719,0.00626653564870938,0.00805170554164711,0.00909753152273587,0.00926956517506374,0.00851719241520048,0.00688222734150797,0.00449764441686225,0.00157746208199632,-0.00160235540249721,-0.00472996192539846,-0.00748817793301519,-0.00958713712523828,-0.0107940859752954,-0.0109596766283917,-0.0100351425145961,-0.00808072780053115,-0.00526268595861600,-0.00183935923162026,0.00186249510867521,0.00547892095793764,0.00864492022301997,0.0110313324960713,0.0123791873891785,0.0125278289547627,0.0114336353872206,0.00917705057335633,0.00595737369809607,0.00207534381100366,-0.00209517075368689,-0.00614350974846598,-0.00966284215132949,-0.0122914276764740,-0.0137501235104282,-0.0138719651862789,-0.0126212260665567,-0.0100989647407444,-0.00653568739812165,-0.00226971303814964,0.00228479306372671,0.00667885747803106,0.0104730056506481,0.0132817857988811,0.0148133695269571,0.0148998614720425,0.0135158428542829,0.0107825267744004,0.00695716805850543,0.00240867147408457,-0.00241836062119815,-0.00704761682831525,-0.0110185145849989,-0.0139325259244109,-0.0154935836004299,-0.0155384775281832,-0.0140539747648881,-0.0111791161516529,-0.00719201687655875,-0.00248261425452531,0.00248590781652457,0.00722294088822971,0.0112598230840809,0.0141964004626404,0.0157414016325344,0.0157414016325344,0.0141964004626404,0.0112598230840809,0.00722294088822971,0.00248590781652457,-0.00248261425452531,-0.00719201687655875,-0.0111791161516529,-0.0140539747648881,-0.0155384775281832,-0.0154935836004299,-0.0139325259244109,-0.0110185145849989,-0.00704761682831525,-0.00241836062119815,0.00240867147408457,0.00695716805850543,0.0107825267744004,0.0135158428542829,0.0148998614720425,0.0148133695269571,0.0132817857988811,0.0104730056506481,0.00667885747803106,0.00228479306372671,-0.00226971303814964,-0.00653568739812165,-0.0100989647407444,-0.0126212260665567,-0.0138719651862789,-0.0137501235104282,-0.0122914276764740,-0.00966284215132949,-0.00614350974846598,-0.00209517075368689,0.00207534381100366,0.00595737369809607,0.00917705057335633,0.0114336353872206,0.0125278289547627,0.0123791873891785,0.0110313324960713,0.00864492022301997,0.00547892095793764,0.00186249510867521,-0.00183935923162026,-0.00526268595861600,-0.00808072780053115,-0.0100351425145961,-0.0109596766283917,-0.0107940859752954,-0.00958713712523828,-0.00748817793301519,-0.00472996192539846,-0.00160235540249721,0.00157746208199632,0.00449764441686225,0.00688222734150797,0.00851719241520048,0.00926956517506374,0.00909753152273587,0.00805170554164711,0.00626653564870938,0.00394407149588719,0.00133129606730326,-0.00130582024369055,-0.00370940543532424,-0.00565494157169250,-0.00697213035905643,-0.00755926650195843,-0.00739057360584367,-0.00651565824640124,-0.00505125861322986,-0.00316658768389453,-0.00106452237902102,0.00104010148878851,0.00294246290331701,0.00446736801770957,0.00548490934080740,0.00592172647701261,0.00576488252983493,0.00506042629507181,0.00390602081757438,0.00243782915444428,0.000816005998634246,-0.000793410473100364,-0.00223435821447166,-0.00337639233641081,-0.00412568999262549,-0.00443270687538902,-0.00429414791484309,-0.00375068936547749,-0.00288026977569385,-0.00178831607146331,-0.000595373285239269,0.000575868040898509,0.00161297946580677,0.00242399122754277,0.00294531126464593,0.00314636951083864,0.00303037418297349,0.00263126700248408,0.00200845125484845,0.00123942181273581,0.000410255756888907,-0.000393796874464712,-0.00109606567385098,-0.00163578602019037,-0.00197397205633317,-0.00209353372769688,-0.00200160331765247,-0.00172495031210285,-0.00130663123687204,-0.000800125979709631,-0.000262753951819118,0.000249783437051348,0.000689575543830810,0.00102005342865911,0.00121947003422218,0.00128106260560108,0.00121285832912040,0.00103470546554071,0.000775676674159919,0.000469705234407472,0.000152484848965302,-0.000143189146513630,-0.000390099902755409,-0.000569817479130022,-0.000672370888559980,-0.000696825153749857,-0.000649680743386486,-0.000545478136087534,-0.000402372521448911,-0.000239958043012920,-7.60755715613419e-05,7.00863457669656e-05,0.000187529217476479,0.000268634005253894,0.000309062254263896,0.000312733913101735,0.000283734002403504,0.000231674504355012,0.000165295870363603,9.48864361581023e-05,2.83652109919630e-05,-2.73005083255535e-05,-6.84461998177372e-05,-9.31789356243988e-05,-0.000102562475366602,-9.88632981411296e-05,-8.61115259571020e-05,-6.82769267028364e-05,-4.97313169939300e-05,-3.38092824467852e-05,-2.34530170625905e-05,-2.02853013389300e-05,-2.56707627115983e-05,-4.02613346046909e-05,-6.53545984188944e-05,-0.000102716420132544,-0.000156087197022928,-0.000231240191121112,-0.000337562117338735,-0.000488539355319401,0.000658009934591473]

#30k
#bandpassF = [-0.000807813891697367,0.000250802761660156,0.000217288580744924,0.000188483869695075,0.000162486090239463,0.000137668873653645,0.000113899260036918,9.17776955962526e-05,7.32982056163365e-05,6.04158512469631e-05,5.52650420325973e-05,5.84250203512189e-05,6.92951728948377e-05,8.47305666336294e-05,0.000100337631301927,0.000109877054896430,0.000107680368432323,8.85313121832407e-05,5.06412426047511e-05,-5.13589251000327e-06,-7.25714542252091e-05,-0.000143091050134611,-0.000203057463746122,-0.000241182241162772,-0.000243353340150454,-0.000202877693017540,-0.000119204438040578,4.17562813734458e-06,0.000151952337252750,0.000303429190705268,0.000433233113489807,0.000516569284821042,0.000531392814623264,0.000464163402995080,0.000312364304679327,8.78458358118750e-05,-0.000184172299138365,-0.000466556504482725,-0.000715788403239617,-0.000887480647831411,-0.000944312541504821,-0.000862216447394232,-0.000636676234181920,-0.000285017600828459,0.000152940800143260,0.000619512050174618,0.00104551507458052,0.00136040544099004,0.00150376728557786,0.00143420601191604,0.00114047634723123,0.000644089357852365,1.81757524150752e-08,-0.000708180389406111,-0.00137890002071424,-0.00190683619316225,-0.00219870883030571,-0.00218859620604863,-0.00185065543515226,-0.00120673265934548,-0.000327170296672228,0.000675978147735772,0.00166255528806071,0.00248346500719070,0.00300250359759838,0.00311817665916893,0.00278168792502143,0.00200859928051701,0.000881012902246271,-0.000459443954169002,-0.00182940630174983,-0.00302748487744495,-0.00386433070011823,-0.00419115200483505,-0.00392491819608808,-0.00306567553993753,-0.00170135567889596,-5.33784848594362e-07,0.00180748947664049,0.00346320797884896,0.00471390428965531,0.00535154420582428,0.00524632247721537,0.00437055052033599,0.00280870259599073,0.000751110327217709,-0.00152839717175981,-0.00370852287407505,-0.00546542620832680,-0.00652048916202835,-0.00668369273957548,-0.00588632784536069,-0.00419699495933725,-0.00181835651010546,0.000936330218133972,0.00368418810752648,0.00602536730994880,0.00760158871701819,0.00814995593798403,0.00754611385425354,0.00582838351796937,0.00319896859791593,1.07733329036052e-06,-0.00332528455204106,-0.00630397233144074,-0.00849078237439083,-0.00953958041839056,-0.00925633935484381,-0.00763322688349222,-0.00485642375774412,-0.00128594141522028,0.00259083654918478,0.00622561517051884,0.00908697334526406,0.0107380840058912,0.0109032046915616,0.00951284006740137,0.00671993695721033,0.00288457453942908,-0.00147245762263099,-0.00574031306207420,-0.00930409318303200,-0.0116338622765150,-0.0123633765905501,-0.0113474201055235,-0.00868839419443277,-0.00472746099986691,-1.02854365277094e-06,0.00483207767456241,0.00908293761572967,0.0121313031260365,0.0135164198454611,0.0130067130901933,0.0106377921254948,0.00671254130326184,0.00176250343770463,-0.00352441866778891,-0.00840008873967020,-0.0121627465264651,-0.0142585192984026,-0.0143633904727356,-0.0124332143870197,-0.00871405226134507,-0.00371106639937004,0.00188067100787531,0.00727321027540077,0.0116976729813240,0.0145146259969433,0.0153070389502690,0.0139423464377417,0.0105942654165444,0.00572063258592604,4.70494543805024e-07,-0.00576132300294670,-0.0107480703560738,-0.0142480507561564,-0.0157567289791695,-0.0150500309339892,-0.0122177742915583,-0.00765235296163895,-0.00199384762526428,0.00396032142352550,0.00936866683991817,0.0134655477232706,0.0156703083168826,0.0156703083168826,0.0134655477232706,0.00936866683991817,0.00396032142352550,-0.00199384762526428,-0.00765235296163895,-0.0122177742915583,-0.0150500309339892,-0.0157567289791695,-0.0142480507561564,-0.0107480703560738,-0.00576132300294670,4.70494543805024e-07,0.00572063258592604,0.0105942654165444,0.0139423464377417,0.0153070389502690,0.0145146259969433,0.0116976729813240,0.00727321027540077,0.00188067100787531,-0.00371106639937004,-0.00871405226134507,-0.0124332143870197,-0.0143633904727356,-0.0142585192984026,-0.0121627465264651,-0.00840008873967020,-0.00352441866778891,0.00176250343770463,0.00671254130326184,0.0106377921254948,0.0130067130901933,0.0135164198454611,0.0121313031260365,0.00908293761572967,0.00483207767456241,-1.02854365277094e-06,-0.00472746099986691,-0.00868839419443277,-0.0113474201055235,-0.0123633765905501,-0.0116338622765150,-0.00930409318303200,-0.00574031306207420,-0.00147245762263099,0.00288457453942908,0.00671993695721033,0.00951284006740137,0.0109032046915616,0.0107380840058912,0.00908697334526406,0.00622561517051884,0.00259083654918478,-0.00128594141522028,-0.00485642375774412,-0.00763322688349222,-0.00925633935484381,-0.00953958041839056,-0.00849078237439083,-0.00630397233144074,-0.00332528455204106,1.07733329036052e-06,0.00319896859791593,0.00582838351796937,0.00754611385425354,0.00814995593798403,0.00760158871701819,0.00602536730994880,0.00368418810752648,0.000936330218133972,-0.00181835651010546,-0.00419699495933725,-0.00588632784536069,-0.00668369273957548,-0.00652048916202835,-0.00546542620832680,-0.00370852287407505,-0.00152839717175981,0.000751110327217709,0.00280870259599073,0.00437055052033599,0.00524632247721537,0.00535154420582428,0.00471390428965531,0.00346320797884896,0.00180748947664049,-5.33784848594362e-07,-0.00170135567889596,-0.00306567553993753,-0.00392491819608808,-0.00419115200483505,-0.00386433070011823,-0.00302748487744495,-0.00182940630174983,-0.000459443954169002,0.000881012902246271,0.00200859928051701,0.00278168792502143,0.00311817665916893,0.00300250359759838,0.00248346500719070,0.00166255528806071,0.000675978147735772,-0.000327170296672228,-0.00120673265934548,-0.00185065543515226,-0.00218859620604863,-0.00219870883030571,-0.00190683619316225,-0.00137890002071424,-0.000708180389406111,1.81757524150752e-08,0.000644089357852365,0.00114047634723123,0.00143420601191604,0.00150376728557786,0.00136040544099004,0.00104551507458052,0.000619512050174618,0.000152940800143260,-0.000285017600828459,-0.000636676234181920,-0.000862216447394232,-0.000944312541504821,-0.000887480647831411,-0.000715788403239617,-0.000466556504482725,-0.000184172299138365,8.78458358118750e-05,0.000312364304679327,0.000464163402995080,0.000531392814623264,0.000516569284821042,0.000433233113489807,0.000303429190705268,0.000151952337252750,4.17562813734458e-06,-0.000119204438040578,-0.000202877693017540,-0.000243353340150454,-0.000241182241162772,-0.000203057463746122,-0.000143091050134611,-7.25714542252091e-05,-5.13589251000327e-06,5.06412426047511e-05,8.85313121832407e-05,0.000107680368432323,0.000109877054896430,0.000100337631301927,8.47305666336294e-05,6.92951728948377e-05,5.84250203512189e-05,5.52650420325973e-05,6.04158512469631e-05,7.32982056163365e-05,9.17776955962526e-05,0.000113899260036918,0.000137668873653645,0.000162486090239463,0.000188483869695075,0.000217288580744924,0.000250802761660156,-0.000807813891697367]

#35k
#bandpassF = [0.000693270990677136,0.000471509488988596,-0.000295289695237619,0.000243085795527756,-0.000171941356940618,0.000109501788389669,-0.000107500985402473,4.90183128565159e-05,-5.66934326091127e-05,3.28688081648710e-05,-2.23738125545828e-05,1.79604425931355e-05,-2.51952798727284e-05,-2.08438869301591e-05,-5.76894612763978e-05,-5.98835215336520e-05,-6.89101639382677e-05,-4.28406081025171e-05,-6.16446615868578e-06,5.54617602015664e-05,0.000117576441608993,0.000174616803279956,0.000202318060354638,0.000191598383565852,0.000131342314421793,2.74314508928192e-05,-0.000107381235609109,-0.000246822289261501,-0.000360951565920665,-0.000417958348565763,-0.000394154086304988,-0.000279536149220338,-8.43054250042415e-05,0.000161866522841066,0.000414007916354749,0.000618500449254927,0.000723163084700309,0.000690258810454581,0.000507823679430901,0.000193297644914262,-0.000205149087898567,-0.000613783102153320,-0.000947671577975199,-0.00112793834472836,-0.00109717938095293,-0.000836275355694826,-0.000372970059500808,0.000220163619747396,0.000835127959967934,0.00134634038591455,0.00163801516881889,0.00162669574060724,0.00128315438930325,0.000644768225133106,-0.000187343037055256,-0.00106231299620613,-0.00180512308736447,-0.00225279675955700,-0.00228705641723939,-0.00186361752782498,-0.00102883506839151,8.47348156992544e-05,0.00127520801848373,0.00230870426433545,0.00296419629657485,0.00307905241893080,0.00258792947748831,0.00154271720291005,0.000110477030587138,-0.00144977638088872,-0.00283545216464658,-0.00375657690163248,-0.00399616316300234,-0.00345915738982615,-0.00219933486224874,-0.000419632203877671,0.00155977882618004,0.00335855358474157,0.00460663068019855,0.00502258439495701,0.00447195805439870,0.00300595281143991,0.000860513348559737,-0.00157904114964881,-0.00384667469890810,-0.00548444228509387,-0.00613365673747692,-0.00561225300336597,-0.00396094766419016,-0.00144539670289310,0.00148252884911747,0.00426732596501615,0.00635358101387472,0.00729657619886410,0.00685625169980512,0.00505354621722663,0.00217973996612052,-0.00125007962894549,-0.00458748437060874,-0.00717443677649639,-0.00847153300169429,-0.00817030106598721,-0.00626365829526073,-0.00305956064103687,0.000867265863129218,0.00477712401546443,0.00790600909083223,0.00961303796148986,0.00951338446956949,0.00756099732640650,0.00407152423406717,-0.000328139324448123,-0.00481150955371978,-0.00850831112977607,-0.0106737838003029,-0.0108375953003933,-0.00890664287938935,-0.00519215709196994,-0.000363863985466405,0.00467309935005910,0.00894640836092042,0.0116058324752633,0.0120922130604175,0.0102541619867516,0.00638886917052343,0.00119490605968603,-0.00435396069610187,-0.00919166244093971,-0.0123656268001954,-0.0132248603719201,-0.0115531167409124,-0.00762061151809393,-0.00214137231393828,0.00385665578653644,0.00922491819001573,0.0129155053018512,0.0141864571527348,0.0127507539422013,0.00884073251422122,0.00317024101260757,-0.00319442542094827,-0.00903790478750909,-0.0132270938832947,-0.0149332715050377,-0.0137960629982359,-0.00999902986986594,-0.00424163537026186,0.00239141368115845,0.00863393729820431,0.0132831107898725,0.0154304581317554,0.0146424131391475,0.0110456750893059,0.00530979664013623,-0.00148014988703883,-0.00802863041960784,-0.0130784721892348,-0.0156544256561652,-0.0152509009000468,-0.0119337100276058,-0.00632729909705195,0.000501054279878219,0.00724787075406344,0.0126218050197067,0.0155936652946974,0.0155936652946974,0.0126218050197067,0.00724787075406344,0.000501054279878219,-0.00632729909705195,-0.0119337100276058,-0.0152509009000468,-0.0156544256561652,-0.0130784721892348,-0.00802863041960784,-0.00148014988703883,0.00530979664013623,0.0110456750893059,0.0146424131391475,0.0154304581317554,0.0132831107898725,0.00863393729820431,0.00239141368115845,-0.00424163537026186,-0.00999902986986594,-0.0137960629982359,-0.0149332715050377,-0.0132270938832947,-0.00903790478750909,-0.00319442542094827,0.00317024101260757,0.00884073251422122,0.0127507539422013,0.0141864571527348,0.0129155053018512,0.00922491819001573,0.00385665578653644,-0.00214137231393828,-0.00762061151809393,-0.0115531167409124,-0.0132248603719201,-0.0123656268001954,-0.00919166244093971,-0.00435396069610187,0.00119490605968603,0.00638886917052343,0.0102541619867516,0.0120922130604175,0.0116058324752633,0.00894640836092042,0.00467309935005910,-0.000363863985466405,-0.00519215709196994,-0.00890664287938935,-0.0108375953003933,-0.0106737838003029,-0.00850831112977607,-0.00481150955371978,-0.000328139324448123,0.00407152423406717,0.00756099732640650,0.00951338446956949,0.00961303796148986,0.00790600909083223,0.00477712401546443,0.000867265863129218,-0.00305956064103687,-0.00626365829526073,-0.00817030106598721,-0.00847153300169429,-0.00717443677649639,-0.00458748437060874,-0.00125007962894549,0.00217973996612052,0.00505354621722663,0.00685625169980512,0.00729657619886410,0.00635358101387472,0.00426732596501615,0.00148252884911747,-0.00144539670289310,-0.00396094766419016,-0.00561225300336597,-0.00613365673747692,-0.00548444228509387,-0.00384667469890810,-0.00157904114964881,0.000860513348559737,0.00300595281143991,0.00447195805439870,0.00502258439495701,0.00460663068019855,0.00335855358474157,0.00155977882618004,-0.000419632203877671,-0.00219933486224874,-0.00345915738982615,-0.00399616316300234,-0.00375657690163248,-0.00283545216464658,-0.00144977638088872,0.000110477030587138,0.00154271720291005,0.00258792947748831,0.00307905241893080,0.00296419629657485,0.00230870426433545,0.00127520801848373,8.47348156992544e-05,-0.00102883506839151,-0.00186361752782498,-0.00228705641723939,-0.00225279675955700,-0.00180512308736447,-0.00106231299620613,-0.000187343037055256,0.000644768225133106,0.00128315438930325,0.00162669574060724,0.00163801516881889,0.00134634038591455,0.000835127959967934,0.000220163619747396,-0.000372970059500808,-0.000836275355694826,-0.00109717938095293,-0.00112793834472836,-0.000947671577975199,-0.000613783102153320,-0.000205149087898567,0.000193297644914262,0.000507823679430901,0.000690258810454581,0.000723163084700309,0.000618500449254927,0.000414007916354749,0.000161866522841066,-8.43054250042415e-05,-0.000279536149220338,-0.000394154086304988,-0.000417958348565763,-0.000360951565920665,-0.000246822289261501,-0.000107381235609109,2.74314508928192e-05,0.000131342314421793,0.000191598383565852,0.000202318060354638,0.000174616803279956,0.000117576441608993,5.54617602015664e-05,-6.16446615868578e-06,-4.28406081025171e-05,-6.89101639382677e-05,-5.98835215336520e-05,-5.76894612763978e-05,-2.08438869301591e-05,-2.51952798727284e-05,1.79604425931355e-05,-2.23738125545828e-05,3.28688081648710e-05,-5.66934326091127e-05,4.90183128565159e-05,-0.000107500985402473,0.000109501788389669,-0.000171941356940618,0.000243085795527756,-0.000295289695237619,0.000471509488988596,0.000693270990677136]

#40k
#bandpassF = [0.000342493713167677,-0.000820050441967298,-0.000304833207685223,-0.000115607009957285,-4.30708926383925e-05,-1.37636808472975e-05,-3.22568305928821e-06,-2.90681000658286e-06,-8.26215447814738e-06,-1.41272729422212e-05,-1.50668571375161e-05,-6.42486861501812e-06,1.29537885445718e-05,3.97723788496731e-05,6.56408321581723e-05,7.96877284908689e-05,7.14699154608847e-05,3.57512039322931e-05,-2.46926232669766e-05,-9.72097800802734e-05,-0.000161745303652463,-0.000195163584608932,-0.000178866972145451,-0.000105203690668493,1.69462325327382e-05,0.000162171467525107,0.000292218307483239,0.000366006347064875,0.000350662975308483,0.000233827078464435,2.99223003544650e-05,-0.000218275728269415,-0.000448682810868904,-0.000593281839481499,-0.000598429887247664,-0.000440429217027906,-0.000139064856459178,0.000244640626668969,0.000615891253017602,0.000872965973216764,0.000928796542556093,0.000743025301431210,0.000334670507279050,-0.000214922321705293,-0.000772763758020200,-0.00119194324708565,-0.00134319894964918,-0.00115500033798956,-0.000640161459569062,9.90465967825264e-05,0.000890970476232279,0.00153072345448888,0.00183280736043650,0.00168323276706158,0.00107780614784168,0.000132274498608067,-0.000936659951579544,-0.00185953466761888,-0.00238033398291516,-0.00232655708648751,-0.00166206328758269,-0.000508679087312998,0.000873333289212414,0.00214208906883743,0.00295782701835056,0.00307186921033124,0.00239961944850347,0.00105515969094028,-0.000662988037277588,-0.00233679828771882,-0.00352890694655753,-0.00389615379648230,-0.00328533850269050,-0.00178692454886428,0.000272404226535908,0.00239833943338500,0.00404703428891930,0.00476270514881712,0.00430187545590449,0.00270996159484231,0.000326769656319484,-0.00228238587137084,-0.00446129830310688,-0.00562529015368816,-0.00541805141617738,-0.00381576789565416,-0.00115163534451492,0.00194966201870466,0.00471798769726364,0.00642829755257180,0.00658897888987668,0.00508059462977885,0.00220560065093064,-0.00136931292943368,-0.00476626449161855,-0.00711115020584045,-0.00775810385719620,-0.00646565554897978,-0.00347635891517938,0.000523859314584568,0.00456155908014247,0.00761241620903668,0.00886107564588854,0.00791780704362951,0.00493485796971305,0.000589107615069818,-0.00406998128845190,-0.00787377257220984,-0.00982773534643040,-0.00937095919339345,-0.00653419362037360,-0.00195286087594953,0.00327388388223312,0.00784659698716627,0.0105892642196995,0.0107515798899127,0.00821308560246711,0.00353246078353239,-0.00217305268503457,-0.00749506901532021,-0.0110817579271312,-0.0119821406465520,-0.00989761823045995,-0.00527478563368263,0.000787765295225933,0.00680125247375188,0.0112527518564921,0.0129869823717266,0.0115062699299243,0.00711107366105668,0.000841804023441748,-0.00576745768095523,-0.0110657655253921,-0.0136987718560905,-0.0129556055679521,-0.00896048830809707,-0.00265644958714057,0.00441753683005577,0.0105033856330229,0.0140623115036360,0.0141653374635092,0.0107359579205440,0.00458163418169877,-0.00279634408668929,-0.00957039455038016,-0.0140411446329203,-0.0150655011297868,-0.0123494815104807,-0.00653149985244006,0.000967908110785268,0.00829418622892745,0.0136195742563718,0.0156006116911001,0.0137184727535424,0.00841496180369605,0.000988862288834391,-0.00672371160356000,-0.0128050750185787,-0.0157348455033759,-0.0147717626795867,-0.0101416341559327,-0.00298472681045271,0.00492656046636810,0.0116283576526574,0.0154550797446179,0.0154550797446179,0.0116283576526574,0.00492656046636810,-0.00298472681045271,-0.0101416341559327,-0.0147717626795867,-0.0157348455033759,-0.0128050750185787,-0.00672371160356000,0.000988862288834391,0.00841496180369605,0.0137184727535424,0.0156006116911001,0.0136195742563718,0.00829418622892745,0.000967908110785268,-0.00653149985244006,-0.0123494815104807,-0.0150655011297868,-0.0140411446329203,-0.00957039455038016,-0.00279634408668929,0.00458163418169877,0.0107359579205440,0.0141653374635092,0.0140623115036360,0.0105033856330229,0.00441753683005577,-0.00265644958714057,-0.00896048830809707,-0.0129556055679521,-0.0136987718560905,-0.0110657655253921,-0.00576745768095523,0.000841804023441748,0.00711107366105668,0.0115062699299243,0.0129869823717266,0.0112527518564921,0.00680125247375188,0.000787765295225933,-0.00527478563368263,-0.00989761823045995,-0.0119821406465520,-0.0110817579271312,-0.00749506901532021,-0.00217305268503457,0.00353246078353239,0.00821308560246711,0.0107515798899127,0.0105892642196995,0.00784659698716627,0.00327388388223312,-0.00195286087594953,-0.00653419362037360,-0.00937095919339345,-0.00982773534643040,-0.00787377257220984,-0.00406998128845190,0.000589107615069818,0.00493485796971305,0.00791780704362951,0.00886107564588854,0.00761241620903668,0.00456155908014247,0.000523859314584568,-0.00347635891517938,-0.00646565554897978,-0.00775810385719620,-0.00711115020584045,-0.00476626449161855,-0.00136931292943368,0.00220560065093064,0.00508059462977885,0.00658897888987668,0.00642829755257180,0.00471798769726364,0.00194966201870466,-0.00115163534451492,-0.00381576789565416,-0.00541805141617738,-0.00562529015368816,-0.00446129830310688,-0.00228238587137084,0.000326769656319484,0.00270996159484231,0.00430187545590449,0.00476270514881712,0.00404703428891930,0.00239833943338500,0.000272404226535908,-0.00178692454886428,-0.00328533850269050,-0.00389615379648230,-0.00352890694655753,-0.00233679828771882,-0.000662988037277588,0.00105515969094028,0.00239961944850347,0.00307186921033124,0.00295782701835056,0.00214208906883743,0.000873333289212414,-0.000508679087312998,-0.00166206328758269,-0.00232655708648751,-0.00238033398291516,-0.00185953466761888,-0.000936659951579544,0.000132274498608067,0.00107780614784168,0.00168323276706158,0.00183280736043650,0.00153072345448888,0.000890970476232279,9.90465967825264e-05,-0.000640161459569062,-0.00115500033798956,-0.00134319894964918,-0.00119194324708565,-0.000772763758020200,-0.000214922321705293,0.000334670507279050,0.000743025301431210,0.000928796542556093,0.000872965973216764,0.000615891253017602,0.000244640626668969,-0.000139064856459178,-0.000440429217027906,-0.000598429887247664,-0.000593281839481499,-0.000448682810868904,-0.000218275728269415,2.99223003544650e-05,0.000233827078464435,0.000350662975308483,0.000366006347064875,0.000292218307483239,0.000162171467525107,1.69462325327382e-05,-0.000105203690668493,-0.000178866972145451,-0.000195163584608932,-0.000161745303652463,-9.72097800802734e-05,-2.46926232669766e-05,3.57512039322931e-05,7.14699154608847e-05,7.96877284908689e-05,6.56408321581723e-05,3.97723788496731e-05,1.29537885445718e-05,-6.42486861501812e-06,-1.50668571375161e-05,-1.41272729422212e-05,-8.26215447814738e-06,-2.90681000658286e-06,-3.22568305928821e-06,-1.37636808472975e-05,-4.30708926383925e-05,-0.000115607009957285,-0.000304833207685223,-0.000820050441967298,0.000342493713167677]





#import SDK
if sys.platform.startswith("win"):
    dwf = cdll.dwf
elif sys.platform.startswith("darwin"):
    dwf = cdll.LoadLibrary("/Library/Frameworks/dwf.framework/dwf")
else:
    dwf = cdll.LoadLibrary("libdwf.so")

def kill():
    dwf.FDwfAnalogOutReset(hdwf, c_int(0))
    dwf.FDwfDeviceCloseAll()
    exit(1)

def killHandler(signum, frame):
    kill()

signal.signal(signal.SIGINT, killHandler)

#declare ctype variables
target_frequency = 30e3
sensor_distance = .015
sound_speed = 1500

hdwf = c_int()
sts = c_byte()
hzAcq = c_double(500000)
switching = int(hzAcq.value/4)
fs = hzAcq.value
nSamples = int(1*hzAcq.value)
rawData1 = (c_double*nSamples)()
rawData2 = (c_double*nSamples)()
dataToSend1 = np.zeros(nSamples)
dataToSend2 = np.zeros(nSamples)
cAvailable = c_int()
cLost = c_int()
cCorrupted = c_int()
fLost = 0
fCorrupted = 0
sampleCount = 1
splineFactor = 4
splineI = np.arange(nSamples/splineFactor)
splineII = np.arange(0,nSamples/splineFactor,1.0/splineFactor)
stabilizeTime = 10


continuous = True

class function:
    """ function names """
    pulse = DwfDigitalOutTypePulse
    custom = DwfDigitalOutTypeCustom
    random = DwfDigitalOutTypeRandom
class trigger_source:
    """ trigger source names """
    none = trigsrcNone
    analog = trigsrcDetectorAnalogIn
    digital = trigsrcDetectorDigitalIn
    external = [None, trigsrcExternal1, trigsrcExternal2, trigsrcExternal3, trigsrcExternal4]

def generate(device_handle, channel, function, frequency, duty_cycle=50, data=[], wait=0, repeat=0, trigger_enabled=False, trigger_source=trigger_source.none, trigger_edge_rising=True):
    """
        generate a logic signal
        
        parameters: - channel - the selected DIO line number
                    - function - possible: pulse, custom, random
                    - frequency in Hz
                    - duty cycle in percentage, used only if function = pulse, default is 50%
                    - data list, used only if function = custom, default is empty
                    - wait time in seconds, default is 0 seconds
                    - repeat count, default is infinite (0)
                    - trigger_enabled - include/exclude trigger from repeat cycle
                    - trigger_source - possible: none, analog, digital, external[1-4]
                    - trigger_edge_rising - True means rising, False means falling, None means either, default is rising
    """
    # get internal clock frequency
    internal_frequency = c_double()
    dwf.FDwfDigitalOutInternalClockInfo(device_handle, byref(internal_frequency))
    
    # get counter value range
    counter_limit = c_uint()
    dwf.FDwfDigitalOutCounterInfo(device_handle, c_int(0), c_int(0), byref(counter_limit))
    
    # calculate the divider for the given signal frequency
    divider = int(-(-(internal_frequency.value / frequency) // counter_limit.value))
    
    # enable the respective channel
    dwf.FDwfDigitalOutEnableSet(device_handle, c_int(channel), c_int(1))
    
    # set output type
    dwf.FDwfDigitalOutTypeSet(device_handle, c_int(channel), function)
    
    # set frequency
    dwf.FDwfDigitalOutDividerSet(device_handle, c_int(channel), c_int(divider))
    
    # set wait time
    dwf.FDwfDigitalOutWaitSet(device_handle, c_double(wait))
    
    # set repeat count
    dwf.FDwfDigitalOutRepeatSet(device_handle, c_int(repeat))
    
    # enable triggering
    dwf.FDwfDigitalOutRepeatTriggerSet(device_handle, c_int(trigger_enabled))
    
    if not trigger_enabled:
        # set trigger source
        dwf.FDwfDigitalOutTriggerSourceSet(device_handle, trigger_source)
    
        # set trigger slope
        if trigger_edge_rising == True:
            # rising edge
            dwf.FDwfDigitalOutTriggerSlopeSet(device_handle, DwfTriggerSlopeRise)
        elif trigger_edge_rising == False:
            # falling edge
            dwf.FDwfDigitalOutTriggerSlopeSet(device_handle, DwfTriggerSlopeFall)
        elif trigger_edge_rising == None:
            # either edge
            dwf.FDwfDigitalOutTriggerSlopeSet(device_handle, DwfTriggerSlopeEither)

    # set PWM signal duty cycle
    if function == DwfDigitalOutTypePulse:
        # calculate counter steps to get the required frequency
        steps = int(round(internal_frequency.value / frequency / divider))
        # calculate steps for low and high parts of the period
        high_steps = int(steps * duty_cycle / 100)
        low_steps = int(steps - high_steps)
        dwf.FDwfDigitalOutCounterSet(device_handle, c_int(channel), c_int(low_steps), c_int(high_steps))
    
    # load custom signal data
    elif function == DwfDigitalOutTypeCustom:
        # format data
        buffer = (c_ubyte * ((len(data) + 7) >> 3))(0)
        for index in range(len(data)):
            if data[index] != 0:
                buffer[index >> 3] |= 1 << (index & 7)
    
        # load data
        dwf.FDwfDigitalOutDataSet(device_handle, c_int(channel), byref(buffer), c_int(len(data)))
    
    # start generating the signal
    dwf.FDwfDigitalOutConfigure(device_handle, c_int(True))
    return


def record_set_up():
    global dwf, hdwf, hzAcq, nSamples


    #print(DWF version
    version = create_string_buffer(16)
    dwf.FDwfGetVersion(version)
    print("DWF Version: "+str(version.value))

    #open device
    print("Opening first device")
    dwf.FDwfDeviceOpen(c_int(-1), byref(hdwf))

    if hdwf.value == hdwfNone.value:
        szerr = create_string_buffer(512)
        dwf.FDwfGetLastErrorMsg(szerr)
        print(str(szerr.value))
        print("failed to open device")
        quit()

    device_name = create_string_buffer(32)
    dwf.FDwfEnumDeviceName(c_int(0), device_name)
    print("First Device: " + str(device_name.value))

    


    #set up acquisition
    dwf.FDwfAnalogInBufferSizeSet(hdwf, c_int(8192)) #set buffer to 8kB (max record length = 8192/1M = )
    dwf.FDwfAnalogInChannelEnableSet(hdwf, c_int(0), c_bool(True))
    dwf.FDwfAnalogInChannelRangeSet(hdwf, c_int(0), c_double(10))
    dwf.FDwfAnalogInAcquisitionModeSet(hdwf, acqmodeRecord)
    dwf.FDwfAnalogInFrequencySet(hdwf, hzAcq)
    dwf.FDwfAnalogInRecordLengthSet(hdwf, c_double(-1)) # -1 infinite record length

    #set up pattern generation
    
    #generate(hdwf, 0, function.pulse, switching)

    # set up analog IO channel nodes
    # enable positive supply
    dwf.FDwfAnalogIOChannelNodeSet(hdwf, c_int(0), c_int(0), c_double(True)) 
    # set voltage to 5 V
    dwf.FDwfAnalogIOChannelNodeSet(hdwf, c_int(0), c_int(1), c_double(5.0)) 
    # enable negative supply
    dwf.FDwfAnalogIOChannelNodeSet(hdwf, c_int(1), c_int(0), c_double(True)) 
    # set voltage to -5 V
    dwf.FDwfAnalogIOChannelNodeSet(hdwf, c_int(1), c_int(1), c_double(-5.0)) 
    # master enable
    dwf.FDwfAnalogIOEnableSet(hdwf, c_int(True))
    print("Power supplies set to +/- 5V")


    #wait at least 2 seconds for the offset to stabilize
    time.sleep(stabilizeTime)

class Data_Record(threading.Thread):
    def __init__(self, data_process_thread, q):
        threading.Thread.__init__(self)
        self.data_process_thread = data_process_thread
        self.q = q

    def run(self):
        global dwf, hdwf, hzAcq, nSamples, rawData1, rawData2, cAvailable, cLost, cCorrupted, fLost, fCorrupted, timeElapsed

        print("Starting oscilloscope")
        dwf.FDwfAnalogInConfigure(hdwf, c_int(0), c_int(1))
        
        num = 0
        while True:
            cSamples = 0
            cLostNum = 0
            cCorrNum = 0
            times = time.time()
            while cSamples < nSamples:
                dwf.FDwfAnalogInStatus(hdwf, c_int(1), byref(sts))
                if cSamples == 0 and (sts == DwfStateConfig or sts == DwfStatePrefill or sts == DwfStateArmed) :
                    # Acquisition not yet started.
                    continue

                dwf.FDwfAnalogInStatusRecord(hdwf, byref(cAvailable), byref(cLost), byref(cCorrupted))
                
                cSamples += cLost.value

                if cLost.value :
                    fLost = 1
                    cLostNum += cLost.value
                if cCorrupted.value :
                    fCorrupted = 1
                    cCorrNum += cCorrupted.value
                if cAvailable.value==0 :
                    continue

                if cSamples+cAvailable.value > nSamples :
                    cAvailable = c_int(nSamples-cSamples)

                dwf.FDwfAnalogInStatusData(hdwf, c_int(0), byref(rawData1, sizeof(c_double)*cSamples), cAvailable) # get channel 1 data
                dwf.FDwfAnalogInStatusData(hdwf, c_int(1), byref(rawData2, sizeof(c_double)*cSamples), cAvailable) # get channel 2 data
                cSamples += cAvailable.value

            dataToSend1 = np.ctypeslib.as_array(rawData1)
            dataToSend2 = np.ctypeslib.as_array(rawData2)
            timeElapsed = time.time() - times
            if not continuous:
                num += 1
            queueData = [dataToSend1, dataToSend2, timeElapsed, cLost, cCorrupted, num]
            self.q.put(queueData)
            self.data_process_thread.event.set()
            
            if num == sampleCount and not continuous:
                break
        dwf.FDwfAnalogOutReset(hdwf, c_int(0))
        dwf.FDwfDeviceCloseAll()
        self.data_process_thread.join()

        print("Recording done")
        if fLost:
            print("Samples were lost! Reduce frequency")
        if fCorrupted:
            print("Samples could be corrupted! Reduce frequency")

        return

class Data_Process(threading.Thread):
    def __init__(self, event, q):
        threading.Thread.__init__(self)
        self.event = event
        self.q = q
        self.bigdata1 = np.empty(0)
        self.bigdata2 = np.empty(0)

                      
    def run(self):
        print("waiting for signal")
        while True:
            self.event.wait()

            queueData = self.q.get()

            procTimeElapsed = time.time()
            
            num = queueData[5]
            raw1 = queueData[0]
            raw2 = queueData[1]
            timeElapsed = queueData[2]
            lostNum = queueData[3].value
            corrNum = queueData[4].value

            raw1t = np.convolve(raw1,bandpass,'same')
            raw2t = np.convolve(raw2,bandpass,'same')

            raw1b = np.convolve(raw1t,bandpassF,'same')
            raw2b = np.convolve(raw2t,bandpassF,'same')

            smallN = len(raw1)
            smalln = 50
            energies = np.zeros(int(smallN/smalln))

            for i in range(int(smallN/smalln)):
                x = raw1b[(i*smalln):(i+1)*smalln]
                X = np.fft.rfft(x)
                avg_energy = np.mean(np.absolute(X[1:3]))
                energies[i] = avg_energy

            n_index = np.argmax(energies>=.1)+1
            length = 200
            slength = 50

            d = target_frequency*sensor_distance/sound_speed # Inter element spacing [lambda]
            M = 2  # number of antenna elements in the antenna system (ULA)
            N = int(length/slength)  # sample size used for the simulation  


            small1 = raw1b[n_index*smalln-1:n_index*smalln+length-1]
            small2 = raw2b[n_index*smalln-1:n_index*smalln+length-1]

            samples = np.zeros([int(length/slength),2],dtype = 'complex_')
            for i in range(int(length/slength)):
                small_fft1 = np.fft.rfft(small1[i*slength:(i+1)*slength])
                small_fft2 = np.fft.rfft(small2[i*slength:(i+1)*slength])
                ind = np.argmax(np.absolute(small_fft1))
                samples[i][0] = (small_fft1[ind])/np.absolute(small_fft1[ind])
                ind = np.argmax(np.absolute(small_fft2))
                samples[i][1] = (small_fft2[ind])/np.absolute(small_fft2[ind])

            final_samples =np.transpose(samples)

            R = corr_matrix_estimate(final_samples.T, imp="mem_eff")

            array_alignment = np.arange(0, M, 1)* d
            incident_angles= np.arange(0,181,1)
            ula_scanning_vectors = gen_ula_scanning_vectors(array_alignment, incident_angles)

            MEM = np.absolute(DOA_MEM(R,ula_scanning_vectors, column_select = 1))
            peaks = scipy.signal.find_peaks(MEM)[0]
            if len(peaks) < 1:
                max_peak = np.max(MEM)
                temp_angle = np.argmax(MEM==max_peak)
                if temp_angle == 0:
                    angle = -90
                elif temp_angle == 180:
                    angle = 90
                else:
                    angle = 180
            else:
                angle = peaks[0]-90
        
            print(angle)



            """self.bigdata1 = np.append(self.bigdata1, raw1)
            self.bigdata2 = np.append(self.bigdata2, raw2)"""
            if num == sampleCount and not continuous:
                print("starting to export data")
                f = open("2sensorRawDeg.csv", "w")
                for i in range(len(rawData1)):
                    f.write("%s,%s\n" % (rawData1[i],rawData2[i]))#(y1[i],y2[i],y3[i],y4[i]))
                f.close()
                print("exported data")
            
        return

def data_communicate():
    while True:
        continue
    return

if __name__ == "__main__":

    time.sleep(1)
    record_set_up()

    q = Queue() #define queue to pass data between threads

    data_process_event = threading.Event()
    data_process_thread = Data_Process(data_process_event, q)
    data_process_thread.start() #set up process thead

    data_record_thread = Data_Record(data_process_thread, q)
    data_record_thread.start() #set up record thread

    data_record_thread.join() #start record thread


    #recording_thread = threading.Thread(target=data_record, args=())
    #processing_thread = threading.Thread(target=data_process, args=())
    communicating_thread = threading.Thread(target=data_communicate, args=())

    #recording_thread.start()
    #processing_thread.start()
    communicating_thread.start()

    #recording_thread.join()
    #processing_thread.join()
    communicating_thread.join()

