#include "ChRt.h"
#include <ADC.h>
#include <ADC_util.h>

#define DATA_SIZE 256

SEMAPHORE_DECL(sem, 0);
SEMAPHORE_DECL(sem2, 0);

ADC *adc = new ADC();

//float firCoeff_float[] = {-0.000699098629411310,-0.000501460453961045,-0.000546094146557152,-0.000479126087157056,-0.000285442394670099,2.06028726097429e-05,0.000394317263271660,0.000767004676163197,0.00106110644992441,0.00120846147183329,0.00116997223813087,0.000948396918829531,0.000592541473452002,0.000186921824933961,-0.000168374317581765,-0.000386119674658403,-0.000417647330323234,-0.000272901903372258,-2.39058881561505e-05,0.000208140598260798,0.000286223716102541,9.64564460446127e-05,-0.000411679502576590,-0.00119844870641828,-0.00212276703678072,-0.00297040445730090,-0.00349228945560753,-0.00346832792274654,-0.00277007301338017,-0.00140507053583860,0.000462372699985281,0.00253359228372574,0.00442924583330751,0.00577203137800098,0.00627317698672414,0.00580679485574365,0.00444735912606120,0.00246202037669718,0.000253400823567063,-0.00173191050998867,-0.00311100319959223,-0.00365897431038320,-0.00336693623103201,-0.00244405260309577,-0.00126380461733788,-0.000263778667431325,0.000175334804225713,-0.000159113085828722,-0.00124371354468167,-0.00281064095906913,-0.00440832693129778,-0.00551692768931389,-0.00568824773654342,-0.00467777764424682,-0.00252675078809261,0.000426070444518700,0.00361396349035203,0.00637599825859070,0.00812438316643238,0.00850026309490204,0.00747571839019656,0.00537064112722874,0.00277613964863122,0.000399856304284185,-0.00112810346763581,-0.00143712770659477,-0.000534289516508579,0.00117750721983612,0.00299313222058117,0.00409234594553709,0.00377386156469584,0.00167507841251791,-0.00208479934372008,-0.00688371295109391,-0.0117135969921947,-0.0154120260849595,-0.0169572401791811,-0.0157482102513313,-0.0117956222966313,-0.00576398242264986,0.00115616689436138,0.00752446986734867,0.0120118828490376,0.0137553419917822,0.0126107614487410,0.00922804791480303,0.00491472799330950,0.00130736269056797,-7.60238108341582e-05,0.00170675653498620,0.00667722942307591,0.0138056203722954,0.0211509335786104,0.0262609701603651,0.0267570819705725,0.0209724009037018,0.00849034264683723,-0.00956033729016781,-0.0305473599582911,-0.0507363565266132,-0.0659875497221947,-0.0726121440529823,-0.0682054162025452,-0.0522682219743729,-0.0264663901180029,0.00554934144020081,0.0387448109686375,0.0676152855157852,0.0872263610363007,0.0941688343882561,0.0872263610363007,0.0676152855157852,0.0387448109686375,0.00554934144020081,-0.0264663901180029,-0.0522682219743729,-0.0682054162025452,-0.0726121440529823,-0.0659875497221947,-0.0507363565266132,-0.0305473599582911,-0.00956033729016781,0.00849034264683723,0.0209724009037018,0.0267570819705725,0.0262609701603651,0.0211509335786104,0.0138056203722954,0.00667722942307591,0.00170675653498620,-7.60238108341582e-05,0.00130736269056797,0.00491472799330950,0.00922804791480303,0.0126107614487410,0.0137553419917822,0.0120118828490376,0.00752446986734867,0.00115616689436138,-0.00576398242264986,-0.0117956222966313,-0.0157482102513313,-0.0169572401791811,-0.0154120260849595,-0.0117135969921947,-0.00688371295109391,-0.00208479934372008,0.00167507841251791,0.00377386156469584,0.00409234594553709,0.00299313222058117,0.00117750721983612,-0.000534289516508579,-0.00143712770659477,-0.00112810346763581,0.000399856304284185,0.00277613964863122,0.00537064112722874,0.00747571839019656,0.00850026309490204,0.00812438316643238,0.00637599825859070,0.00361396349035203,0.000426070444518700,-0.00252675078809261,-0.00467777764424682,-0.00568824773654342,-0.00551692768931389,-0.00440832693129778,-0.00281064095906913,-0.00124371354468167,-0.000159113085828722,0.000175334804225713,-0.000263778667431325,-0.00126380461733788,-0.00244405260309577,-0.00336693623103201,-0.00365897431038320,-0.00311100319959223,-0.00173191050998867,0.000253400823567063,0.00246202037669718,0.00444735912606120,0.00580679485574365,0.00627317698672414,0.00577203137800098,0.00442924583330751,0.00253359228372574,0.000462372699985281,-0.00140507053583860,-0.00277007301338017,-0.00346832792274654,-0.00349228945560753,-0.00297040445730090,-0.00212276703678072,-0.00119844870641828,-0.000411679502576590,9.64564460446127e-05,0.000286223716102541,0.000208140598260798,-2.39058881561505e-05,-0.000272901903372258,-0.000417647330323234,-0.000386119674658403,-0.000168374317581765,0.000186921824933961,0.000592541473452002,0.000948396918829531,0.00116997223813087,0.00120846147183329,0.00106110644992441,0.000767004676163197,0.000394317263271660,2.06028726097429e-05,-0.000285442394670099,-0.000479126087157056,-0.000546094146557152,-0.000501460453961045,-0.000699098629411310};
//int firNum = 219;
//float firCoeff_float[] = {0.00138702077562725,0.00281717989254814,0.00501441102681261,0.00751592883867004,0.00970875689691051,0.0107445340988839,0.00967066681031979,0.00567688211914375,-0.00159599114046373,-0.0118144596049033,-0.0237895509253148,-0.0355011682624448,-0.0443545508334457,-0.0476660383907911,-0.0432604748869685,-0.0301007125851670,-0.00876978626649761,0.0183496764521514,0.0472716534611074,0.0730154155895681,0.0905333709592629,0.0957581608111708,0.0865623178307012,0.0634073226083952,0.0294163750916905,-0.0100604151679062,-0.0484344952306366,-0.0792016505962111,-0.0972438594745068,-0.0999319692147883,-0.0876228266237708,-0.0635682594720833,-0.0331175957223272,-0.00250486345130507,0.0225669296844344,0.0381393229848001,0.0427801680213649,0.0377241058954693,0.0263624917026150,0.0132053133450717,0.00265722773482164,-0.00213401021641661,-2.40013923686096e-05,0.00794764993706396,0.0189694939489621,0.0293279212047350,0.0354996211106589,0.0351222324154034,0.0276328901525809,0.0143848118836384,-0.00178135643430719,-0.0173172581125216,-0.0289488971385415,-0.0345119208102443,-0.0334657678522039,-0.0269334527675960,-0.0172898713212749,-0.00744721852151026,-8.04595870618004e-06,0.00340395262568201,0.00253024860487669,-0.00157082532566766,-0.00692390385571145,-0.0112815617332168,-0.0128040588714584,-0.0105965382310963,-0.00491103631848058,0.00295631015734412,0.0110868902562521,0.0175104449277518,0.0207659593747666,0.0202732662325694,0.0164553926555933,0.0105407212606705,0.00418837417264255,-0.00101682692516474,-0.00398968556809756,-0.00440125750501543,-0.00270473521866006,7.73431964111746e-05,0.00269049847367373,0.00406276977168136,0.00359263078890455,0.00130526356765032,-0.00219325253191672,-0.00594459956820377,-0.00892877133461743,-0.0103730236240594,-0.00995902776945959,-0.00788240763791753,-0.00475831462743273,-0.00142152168618418,0.00133696185270547,0.00296485295667286,0.00328932207632240,0.00252584462150073,0.00117438151880178,-0.000172100931394638,-0.000997896501520383,-0.00102315192686062,-0.000242224549723164,0.00107324336661253,0.00251509201440837,0.00363838598926927,0.00413009959129679,0.00386282786152992,0.00292332828400541,0.00158596428656770,0.000182403977519399,-0.000966785463007796,-0.00164818974004341,-0.00180522828845301,-0.00152311469600616,-0.000985260979427012,-0.000410992843180118,1.86782939079968e-05,0.000201558078590334,0.000129649372993140,-0.000115907483758947,-0.000418692842276280,-0.000663439500098979,-0.000767614815784637,-0.000701718266034344,-0.000504804310304218,-0.000241603155352358,1.51810278818485e-05,0.000196262146902321,0.000273356121449945,0.000603230210817846};
//int firNum = 129;
float firCoeff_float[] = {0.00401976343561174,0.0121860231561700,0.0194297422681295,0.0136552769070512,-0.0145725376635977,-0.0577370409611251,-0.0863300157675888,-0.0650009188096079,0.0159569577732369,0.119560155887184,0.176894449807725,0.135643644230273,0.00662289476938902,-0.134110222559772,-0.196981720652580,-0.146241339217764,-0.0265267671279667,0.0750892221941350,0.0993605569484007,0.0566317457766308,0.00628921000357216,-0.00278142895042360,0.0260496308452647,0.0490956473047276,0.0309227202561105,-0.0202961881006166,-0.0631214356738417,-0.0644603375346588,-0.0294350658715791,0.00776275689915620,0.0188481207856810,0.00584065212916544,-0.00683299303845544,-0.000369756397488103,0.0201728219187654,0.0337137561168959,0.0257399929598506,0.00188960975023198,-0.0191867474259243,-0.0237187084445614,-0.0133212959695597,-0.000146420725315775,0.00568271700373840,0.00345188954579376,-0.000912708818963074,-0.00228695443657176,-0.000411889485321390,0.00180509194717403,0.00223884161329915,0.00128922058797579,-0.000129866597536070};
int firNum = 51;

float sampleData[] = {512,944,975,576,117,25,384,862,1014,700,211,1,265,758,1022,812,323,9,161,639,998,906,447,48,79,511,944,975,576,117,25,384,862,1014,700,211,1,265,758,1022,812,323,9,161,639,998,906,447,48,79,511,944,975,576,117,25,384,862,1014,700,211,1,265,758,1022,812,323,9,161,639,998,906,447,48,79,511,944,975,576,117,25,384,862,1014,700,211,1,265,758,1022,812,323,9,161,639,998,906,447,48,79,511,944,975,576,117,25,384,862,1014,700,211,1,265,758,1022,812,323,9,161,639,998,906,447,48,79,511,944,975,576,117,25,384,862,1014,700,211,1,265,758,1022,812,323,9,161,639,998,906,447,48,79,511,944,975,576,117,25,384,862,1014,700,211,1,265,758,1022,812,323,9,161,639,998,906,447,48,79,511,944,975,576,117,25,384,862,1014,700,211,1,265,758,1022,812,323,9,161,639,998,906,447,48,79,511,944,975,576,117,25,384,862,1014,700,211,1,265,758,1022,812,323,9,161,639,998,906,447,48,79,511,944,975,576,117,25,384,862,1014,700,211,1,265,758,1022,812,323,9,161,639,998,906,447,48,79,511,944,975,576,117,25};
float sampleSquareData[] = {1024,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,1024,1024,1024,0,0,0,0,1024,1024,1024,0,0};
int sampleSize = 256; //512 amplitude 

float computationalDataStream[DATA_SIZE*2];
int computationalDataSize = DATA_SIZE*2;

float bufferDataStream[DATA_SIZE];
int bufferDataSize = DATA_SIZE;

float outputData_float[DATA_SIZE*2];

int dataCounter = 0;

static THD_WORKING_AREA(waAnalogProcessing, 64);
static THD_FUNCTION(AnalogProcessing,arg) {
  (void)arg;
  while (!chThdShouldTerminateX()) {
    chSemWait(&sem);
    unsigned long processingTime = micros();
    //Serial.println("buffer full");
    shiftDataStream(computationalDataStream,bufferDataStream,computationalDataSize); //move buffer
    convolve(firCoeff_float,firNum,computationalDataStream,outputData_float,computationalDataSize); //freq filter
    //convolve(firCoeff_float,firNum, sampleData,outputData_float,sampleSize); //freq filter
    
    //Serial.print("process time: ");
    //Serial.println(micros()-processingTime);
    chSemSignal(&sem2);
        //Serial.println("process complete");

  }
}

static THD_WORKING_AREA(waCommunication, 16);
static THD_FUNCTION(Communication,arg) {
  (void)arg;
  while (!chThdShouldTerminateX()) {
    chSemWait(&sem2);
    for(int i = 0; i < computationalDataSize;i++) {
      Serial.print(i);
      Serial.print(": ");
      Serial.println(outputData_float[i]);
    }
  }
}

static THD_WORKING_AREA(waAnalogReading, 64);
static THD_FUNCTION(AnalogReading, arg) {
  (void)arg;
  systime_t time = chVTGetSystemTime(); // Current system time.
  unsigned long bufferTime = micros();
  uint16_t dataCounter = 0;
  uint8_t cycleCounter = 0;
  uint16_t analogValue;
  while (TRUE) {
    time = chTimeAddX(time, TIME_US2I(16));
    for(uint8_t i = 0;i < 4;i++) {
    //analogValue = adc->analogReadContinuous(0); //uses library for quicker reads
    //bufferDataStream[dataCounter] = analogValue;
    //dataCounter++;
    analogValue = sampleData[dataCounter];
    bufferDataStream[dataCounter] = analogValue;
    dataCounter++;
    }
    

    if(dataCounter == bufferDataSize) {
      //Serial.print("buffer time: ");
      //Serial.println(micros()-bufferTime);
      chSemSignal(&sem);
      dataCounter = 0;
      //bufferTime = micros();

    }
    /*(if(cycleCounter == 255) {
      printSerial();
      chThdExit("ss");
    }*/
    //cycleCounter++;
    
    chThdSleepUntil(time);
  }
}
void chSetup() {
  chThdCreateStatic(waAnalogProcessing, sizeof(waAnalogProcessing), NORMALPRIO + 1, AnalogProcessing, NULL);

  chThdCreateStatic(waAnalogReading, sizeof(waAnalogReading), NORMALPRIO + 2, AnalogReading, NULL);
  
  chThdCreateStatic(waCommunication, sizeof(waCommunication), NORMALPRIO + 1, Communication, NULL);
}

void setup() {
  Serial.begin(6000000);
  adc->adc0->setAveraging(0);
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::HIGH_SPEED);
  adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::HIGH_SPEED);
  adc->startContinuous(0);
   
  chBegin(chSetup);
  while (true) {}
}

void loop() {
}


void shiftDataStream(float *dS, float *bS, int n) { //computational data stream is in two parts, old and new, to prevent transient error. This fn shifts the new section into the old section and moves the buffer into the new section

  for(int i = n/2; i < n;i++) {
    dS[i-n/2] = dS[i]; //shift data
    dS[i] = bS[i-n/2]; //move buffer to computational
    bS[i-n/2] = 0; //clear buffer
  }
}

void convolve (float *p_coeffs, int p_coeffs_n,
               float *p_in, float *p_out, int n)
{
  int i, j, k;
  float tmp;

  for (k = 0; k < n; k++)  //  position in output
  {
    tmp = 0;

    for (i = 0; i < p_coeffs_n; i++)  //  position in coefficients array
    {
      j = k - i;  //  position in input

      if (j >= 0)  //  bounds check for input buffer
      {
        tmp += p_coeffs [i] * p_in [j];
      }
    }

    p_out [k] = tmp;
  }
}
